package com.bmc.multithearding;

import java.util.concurrent.Callable;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

public class ExecutorDemo2 {
	
	class SumTask implements Callable{
		private int count;
		public SumTask(int count){
			this.count = count;
		}
		public int sum(){
			int sum = 0;
			for(int i = 1;i<=count;i++){
				sum+=i;
			}
			return sum;
		}
		@Override
		public Object call() throws Exception {
			int sum = sum();
			System.out.println("Final sum is :"+sum+":ThreadId:"+Thread.currentThread().getId());
			return sum;
		}
	}

	public static void main(String[] args) throws InterruptedException {
		int NOTHREADS = 30;
		ExecutorService service = Executors.newFixedThreadPool(NOTHREADS);
		for (int i = 0; i < NOTHREADS; i++) {
			service.execute(new ExecutorDemo2().new SumTask(i*i));
		}
		service.awaitTermination(5, TimeUnit.SECONDS);
		service.shutdown();
	}

}
